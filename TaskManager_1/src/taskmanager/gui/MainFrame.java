/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package taskmanager.gui;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import taskmanager.ClassConst;
import taskmanager.TaskList;
import taskmanager.WorkTaskList;
import java.util.Date;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import taskmanager.ClientWorkTaskList;

/**
 *
 * @author Настя
 */
public class MainFrame extends JFrame {
   // private TaskList taskList;
    private boolean isPastTaskHide = false;
    /**
     * Creates new form MainFraim
     */
    ClientWorkTaskList workTaskList;
    SetTaskFrame setTaskFrame;
    TaskListTableModel hidePastTableModel;
    TaskListTableModel showPastTableModel;
    
    
    public MainFrame() throws ParseException, IOException, FileNotFoundException, XMLStreamException {
        workTaskList = new ClientWorkTaskList();
        initComponents();
        setTaskFrame = new SetTaskFrame(this, true);
        showPastTableModel = new TaskListTableModel(this);
        hidePastTableModel = new TaskListTableModel(this);
        taskListTable.setModel(showPastTableModel);
        XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();
        XMLEventReader eventReader = xmlInputFactory
                .createXMLEventReader(new FileReader("C:/Users/Александра/Desktop/лаб2/taskList.xml"));
        ClassConst.TIMER = WorkTaskList.readTaskListXMLPostoneTime(eventReader);
        postponeTimeTextField.setText(Integer.toString(ClassConst.TIMER/1000));
        //ClassConst.TIMER=Integer.parseInt(postponeTimeTextField.getText());
        
         
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        addNewTaskButton = new javax.swing.JButton();
        taskScrollPane = new javax.swing.JScrollPane();
        taskListTable = new javax.swing.JTable();
        DeleteTaskButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        hideTaskCheckBox = new javax.swing.JCheckBox();
        postponeTaskLabel = new javax.swing.JLabel();
        postponeTimeTextField = new javax.swing.JTextField();
        timeUnitsComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addNewTaskButton.setText("Add New Task");
        addNewTaskButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addNewTaskButtonMouseClicked(evt);
            }
        });
        addNewTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewTaskButtonActionPerformed(evt);
            }
        });

        taskListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "Date&Time", "Task Name"
            }
        ));
        taskListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                taskListTableMouseClicked(evt);
            }
        });
        taskScrollPane.setViewportView(taskListTable);

        DeleteTaskButton.setText("Delete Task");
        DeleteTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteTaskButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        hideTaskCheckBox.setText("hide past tasks");
        hideTaskCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hideTaskCheckBoxItemStateChanged(evt);
            }
        });

        postponeTaskLabel.setText("Postpone task for");

        postponeTimeTextField.setText("10");
        postponeTimeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postponeTimeTextFieldActionPerformed(evt);
            }
        });

        timeUnitsComboBox.setModel(new javax.swing.DefaultComboBoxModel(ClassConst.MEASURE_OF_TIME));
        timeUnitsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeUnitsComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(hideTaskCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(postponeTaskLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(postponeTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeUnitsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(addNewTaskButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DeleteTaskButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(taskScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addNewTaskButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteTaskButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taskScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hideTaskCheckBox)
                    .addComponent(postponeTaskLabel)
                    .addComponent(postponeTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeUnitsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addNewTaskButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addNewTaskButtonMouseClicked

    }//GEN-LAST:event_addNewTaskButtonMouseClicked

    private void taskListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taskListTableMouseClicked
//        int row= taskListTable.getSelectedRow();
//        int column = taskListTable.getSelectedColumn();       
    }//GEN-LAST:event_taskListTableMouseClicked

    private void DeleteTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteTaskButtonActionPerformed
        try {
            if(taskListTable.getSelectedRow()==-1){
                JOptionPane.showMessageDialog(this, "Select the task to delete!");
            }else
                if (JOptionPane.showConfirmDialog(this, "Do you really want to delete task?", "Delete", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                    
                    workTaskList.deleteTask(taskListTable.getSelectedRow());
                    taskListTable.revalidate();
                    taskListTable.repaint();
                    
                }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (XMLStreamException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_DeleteTaskButtonActionPerformed
  
    private void addNewTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewTaskButtonActionPerformed
        
            if (setTaskFrame.showDialog() == setTaskFrame.SAVE){
                try {
                    workTaskList = new ClientWorkTaskList();
                    taskListTable.revalidate();
                    taskListTable.repaint();
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (XMLStreamException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            int num = taskListTable.getSelectedRow();
           
    }//GEN-LAST:event_addNewTaskButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
            taskListTable.revalidate();
            taskListTable.repaint();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void postponeTimeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postponeTimeTextFieldActionPerformed
        ClassConst.TIMER=Integer.parseInt(postponeTimeTextField.getText());
    }//GEN-LAST:event_postponeTimeTextFieldActionPerformed

    private void hideTaskCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hideTaskCheckBoxItemStateChanged
        if (isPastTaskHide) {
            try {
                try {
                    showPastTask();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (XMLStreamException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                try {
                    hidePastTask();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (XMLStreamException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (ParseException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_hideTaskCheckBoxItemStateChanged

    private void timeUnitsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeUnitsComboBoxActionPerformed
        try {
            if (timeUnitsComboBox.getSelectedIndex()==0){
                ClassConst.TIMER=1000*Integer.parseInt(postponeTimeTextField.getText());
            }
            if (timeUnitsComboBox.getSelectedIndex()==1){
                ClassConst.TIMER=86400000*Integer.parseInt(postponeTimeTextField.getText());
            }
            if (timeUnitsComboBox.getSelectedIndex()==2){
                ClassConst.TIMER=3600000*Integer.parseInt(postponeTimeTextField.getText()) ;
            }
            System.out.println(ClassConst.TIMER);
            WorkTaskList.writeTaskListXMLPostoneTime(ClassConst.TIMER);
        } catch (XMLStreamException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_timeUnitsComboBoxActionPerformed
    
    private void hidePastTask() throws ParseException, IOException, FileNotFoundException, XMLStreamException {
        int i = 0;
        int boxIndex = 0;
        while (i < hidePastTableModel.getRowCount()) {
            if (workTaskList.getTaskList().getTaskByIndex(i).getTime().
                    before(new Date())){
                hidePastTableModel.removeRow(i,boxIndex);
                boxIndex++;
            } else i++;
        } 
        //hidePastTableModel.removeRow(i);
        taskListTable.setModel(hidePastTableModel);
        isPastTaskHide = true;
        taskListTable.repaint();
    }
    
    private void showPastTask() throws IOException, ParseException, FileNotFoundException, XMLStreamException{
        for (int i = 0; i < hidePastTableModel.box.length; i++ ){
            if (hidePastTableModel.box[i] != null){
                workTaskList.addTask(hidePastTableModel.box[i]);
            } 
        }
        isPastTaskHide = false;
        taskListTable.setModel(showPastTableModel);
        taskListTable.repaint();
    }
   
//    public TaskList getTaskList() throws FileNotFoundException, XMLStreamException{
//        try {
//            return TaskList.getInstance();
//        } catch (IOException ex) {
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (ParseException ex) {
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        return null;
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteTaskButton;
    private javax.swing.JButton addNewTaskButton;
    private javax.swing.JCheckBox hideTaskCheckBox;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel postponeTaskLabel;
    private javax.swing.JTextField postponeTimeTextField;
    private javax.swing.JTable taskListTable;
    private javax.swing.JScrollPane taskScrollPane;
    private javax.swing.JComboBox timeUnitsComboBox;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
